// Code generated by "enumer -type Verb -transform lower -text"; DO NOT EDIT.

package commands

import (
	"fmt"
	"strings"
)

const _VerbName = "adddumplistloadremovereportset"

var _VerbIndex = [...]uint8{0, 3, 7, 11, 15, 21, 27, 30}

const _VerbLowerName = "adddumplistloadremovereportset"

func (i Verb) String() string {
	if i < 0 || i >= Verb(len(_VerbIndex)-1) {
		return fmt.Sprintf("Verb(%d)", i)
	}
	return _VerbName[_VerbIndex[i]:_VerbIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VerbNoOp() {
	var x [1]struct{}
	_ = x[Add-(0)]
	_ = x[Dump-(1)]
	_ = x[List-(2)]
	_ = x[Load-(3)]
	_ = x[Remove-(4)]
	_ = x[Report-(5)]
	_ = x[Set-(6)]
}

var _VerbValues = []Verb{Add, Dump, List, Load, Remove, Report, Set}

var _VerbNameToValueMap = map[string]Verb{
	_VerbName[0:3]:        Add,
	_VerbLowerName[0:3]:   Add,
	_VerbName[3:7]:        Dump,
	_VerbLowerName[3:7]:   Dump,
	_VerbName[7:11]:       List,
	_VerbLowerName[7:11]:  List,
	_VerbName[11:15]:      Load,
	_VerbLowerName[11:15]: Load,
	_VerbName[15:21]:      Remove,
	_VerbLowerName[15:21]: Remove,
	_VerbName[21:27]:      Report,
	_VerbLowerName[21:27]: Report,
	_VerbName[27:30]:      Set,
	_VerbLowerName[27:30]: Set,
}

var _VerbNames = []string{
	_VerbName[0:3],
	_VerbName[3:7],
	_VerbName[7:11],
	_VerbName[11:15],
	_VerbName[15:21],
	_VerbName[21:27],
	_VerbName[27:30],
}

// VerbString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VerbString(s string) (Verb, error) {
	if val, ok := _VerbNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VerbNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Verb values", s)
}

// VerbValues returns all values of the enum
func VerbValues() []Verb {
	return _VerbValues
}

// VerbStrings returns a slice of all String values of the enum
func VerbStrings() []string {
	strs := make([]string, len(_VerbNames))
	copy(strs, _VerbNames)
	return strs
}

// IsAVerb returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Verb) IsAVerb() bool {
	for _, v := range _VerbValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Verb
func (i Verb) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Verb
func (i *Verb) UnmarshalText(text []byte) error {
	var err error
	*i, err = VerbString(string(text))
	return err
}
